#!/bin/bash
# Git 관련 함수

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/common.sh"

# 기능 브랜치 생성
create_feature_branch() {
    local feature_name=$1
    
    if [ "$AUTO_BRANCH" != "true" ]; then
        return 0
    fi
    
    log_step "기능 브랜치 생성"
    
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        log_error "Git 저장소가 아닙니다."
        return 1
    fi
    
    local current_branch=$(git branch --show-current)
    
    if [ "$current_branch" != "main" ] && [ "$current_branch" != "master" ]; then
        log_warning "이미 기능 브랜치에 있습니다: $current_branch"
        read -p "현재 브랜치를 사용하시겠습니까? (y/n): " use_current
        if [ "$use_current" == "y" ]; then
            FEATURE_BRANCH="$current_branch"
            log_success "현재 브랜치 사용: $FEATURE_BRANCH"
            return 0
        fi
    fi
    
    local timestamp=$(date +%Y%m%d-%H%M%S)
    FEATURE_BRANCH="feature/tdd-${feature_name}-${timestamp}"
    
    log "브랜치 생성: $FEATURE_BRANCH"
    
    if [ -n "$(git status --porcelain)" ]; then
        log_warning "커밋되지 않은 변경사항이 있습니다."
        read -p "변경사항을 stash 하시겠습니까? (y/n): " do_stash
        if [ "$do_stash" == "y" ]; then
            git stash save "Auto-stash before creating TDD branch"
            log_success "변경사항 stash 완료"
        else
            log_error "브랜치 생성을 취소합니다."
            return 1
        fi
    fi
    
    local main_branch="main"
    if ! git rev-parse --verify main > /dev/null 2>&1; then
        main_branch="master"
    fi
    
    log "최신 $main_branch 브랜치 가져오는 중..."
    git fetch origin "$main_branch" 2>/dev/null || true
    git checkout "$main_branch" 2>/dev/null || true
    git pull origin "$main_branch" 2>/dev/null || true
    
    git checkout -b "$FEATURE_BRANCH"
    
    log_success "브랜치 생성 완료: $FEATURE_BRANCH"
    echo ""
}

# 자동 커밋
auto_commit() {
    local stage=$1
    local files=$2
    local feature_name=$3
    
    if [ "$AUTO_COMMIT" != "true" ]; then
        return 0
    fi
    
    log "Git 커밋 생성 중..."
    
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        log_warning "Git 저장소가 아닙니다. 커밋을 건너뜁니다."
        return 1
    fi
    
    if [ -z "$(git status --porcelain)" ]; then
        log_warning "커밋할 변경사항이 없습니다."
        return 1
    fi
    
    if [ -n "$files" ]; then
        git add $files
    else
        git add .
    fi
    
    local commit_message
    case $stage in
        RED)
            commit_message="test: add failing tests for $feature_name (RED)

📝 RED 단계 - 실패하는 테스트 작성
- AAA 패턴 적용
- 엣지 케이스 포함

Generated by TDD Orchestrator"
            ;;
        GREEN)
            commit_message="feat: implement $feature_name (GREEN)

✅ GREEN 단계 - 테스트 통과하는 구현
- 최소한의 구현
- 모든 테스트 통과

Generated by TDD Orchestrator"
            ;;
        REFACTOR)
            commit_message="refactor: improve $feature_name (REFACTOR)

♻️ REFACTOR 단계 - 코드 품질 개선
- DRY 원칙 적용
- 명명 개선
- 복잡도 감소

Generated by TDD Orchestrator"
            ;;
    esac
    
    git commit -m "$commit_message"
    
    if [ $? -eq 0 ]; then
        log_success "커밋 생성 완료"
        local commit_hash=$(git rev-parse --short HEAD)
        echo -e "${CYAN}  Commit: $commit_hash${NC}"
        return 0
    else
        log_error "커밋 실패"
        return 1
    fi
}

# PR 가이드 출력
show_pr_guide() {
    log_step "PR 생성 가이드 🚀"
    
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}다음 단계로 PR을 생성하세요:${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""
    echo "1️⃣  리모트로 푸시:"
    echo -e "   ${GREEN}git push -u origin $FEATURE_BRANCH${NC}"
    echo ""
    echo "2️⃣  GitHub에서 PR 생성:"
    echo "   브라우저에서 자동으로 'Create Pull Request' 버튼이 나타납니다."
    echo ""
    echo "3️⃣  PR 템플릿 체크리스트 작성:"
    echo "   ${YELLOW}기본 과제(Hard)${NC}"
    echo "   - [x] Agent 구현 명세 문서 또는 코드"
    echo "   - [x] 커밋별 올바르게 단계에 대한 작업"
    echo "   - [x] 결과를 올바로 얻기위한 history 또는 log"
    echo "   - [x] AI 도구 활용을 개선하기 위해 노력한 점"
    echo ""
    echo "4️⃣  커밋 히스토리 확인:"
    echo -e "   ${GREEN}git log --oneline --graph -n 10${NC}"
    echo ""
    
    if [ "$AUTO_COMMIT" == "true" ]; then
        echo -e "${MAGENTA}📝 생성된 커밋 히스토리:${NC}"
        git log --oneline --graph --color=always -n 10 | sed 's/^/   /'
        echo ""
    fi
    
    if [ "$AUTO_PUSH" == "true" ]; then
        echo ""
        read -p "리모트로 푸시하시겠습니까? (y/n): " do_push
        if [ "$do_push" == "y" ]; then
            log "자동 푸시 실행 중..."
            git push -u origin "$FEATURE_BRANCH"
            
            if [ $? -eq 0 ]; then
                log_success "푸시 완료!"
                echo ""
                echo -e "${GREEN}✨ GitHub에서 PR을 생성하세요!${NC}"
                echo ""
                local repo_url=$(git remote get-url origin | sed 's/\.git$//' | sed 's/git@github.com:/https:\/\/github.com\//')
                echo "   $repo_url/compare/$FEATURE_BRANCH"
            else
                log_error "푸시 실패"
            fi
        fi
    fi
    
    echo ""
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
}
