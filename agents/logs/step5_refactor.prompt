당신은 TDD REFACTOR 단계 전문가입니다.

**즉시 개선된 코드를 작성하세요. 권한 요청 없이 바로 작성합니다.**

## 원본 명세

# 예제 기능 명세: 날짜 범위 검증 함수

## 기능 설명
두 날짜 사이의 기간이 유효한지 검증하는 함수를 구현합니다.

## 요구사항

### 1. 기본 동작
- 시작일과 종료일을 입력받습니다
- 시작일이 종료일보다 이전이면 유효합니다
- 시작일과 종료일이 같으면 유효합니다

### 2. 입력
- `startDate`: Date 객체 또는 ISO 8601 문자열
- `endDate`: Date 객체 또는 ISO 8601 문자열

### 3. 출력
- 유효한 경우: `{ isValid: true }`
- 무효한 경우: `{ isValid: false, error: string }`

### 4. 에러 처리
- null 또는 undefined 입력시 에러
- 잘못된 날짜 형식 입력시 에러
- 시작일이 종료일보다 이후인 경우 에러

### 5. 엣지 케이스
- 같은 날짜: 유효
- 1일 차이: 유효
- 100년 이상 차이: 유효 (경고 메시지)

## GREEN 단계 구현 코드

```typescript
// filepath: src/utils/validateDateRange.ts

export interface ValidationResult {
  isValid: boolean;
  error?: string;
  warning?: string;
}

type DateInput = Date | string | null | undefined;

export function validateDateRange(
  startDate: DateInput,
  endDate: DateInput
): ValidationResult {
  // null/undefined 체크 - 시작일
  if (startDate === null || startDate === undefined) {
    return {
      isValid: false,
      error: '시작일이 유효하지 않습니다'
    };
  }

  // null/undefined 체크 - 종료일
  if (endDate === null || endDate === undefined) {
    return {
      isValid: false,
      error: '종료일이 유효하지 않습니다'
    };
  }

  // 빈 문자열 체크
  if (startDate === '') {
    return {
      isValid: false,
      error: '시작일 형식이 올바르지 않습니다'
    };
  }

  if (endDate === '') {
    return {
      isValid: false,
      error: '종료일 형식이 올바르지 않습니다'
    };
  }

  // 숫자 타입 체크 (timestamp 거부)
  if (typeof startDate === 'number') {
    return {
      isValid: false,
      error: '시작일 형식이 올바르지 않습니다'
    };
  }

  if (typeof endDate === 'number') {
    return {
      isValid: false,
      error: '종료일 형식이 올바르지 않습니다'
    };
  }

  // Date 객체로 변환
  const start = startDate instanceof Date ? startDate : new Date(startDate);
  const end = endDate instanceof Date ? endDate : new Date(endDate);

  // Invalid Date 체크 - 시작일
  if (isNaN(start.getTime())) {
    return {
      isValid: false,
      error: '시작일 형식이 올바르지 않습니다'
    };
  }

  // Invalid Date 체크 - 종료일
  if (isNaN(end.getTime())) {
    return {
      isValid: false,
      error: '종료일 형식이 올바르지 않습니다'
    };
  }

  // 시작일이 종료일보다 이후인지 체크
  if (start.getTime() > end.getTime()) {
    return {
      isValid: false,
      error: '시작일이 종료일보다 이후입니다'
    };
  }

  // 100년 초과 체크
  const millisecondsPerYear = 365.25 * 24 * 60 * 60 * 1000;
  const yearsDiff = (end.getTime() - start.getTime()) / millisecondsPerYear;

  if (yearsDiff > 100) {
    return {
      isValid: true,
      warning: '날짜 범위가 100년을 초과합니다'
    };
  }

  // 정상 케이스
  return {
    isValid: true
  };
}
```

---

## 🎯 작업: 코드 리팩토링

### 리팩토링 체크리스트:
- [ ] 중복 제거 (DRY 원칙)
- [ ] 명명 개선 (의도를 명확히)
- [ ] 함수 분리 (단일 책임)
- [ ] 매직 넘버/스트링 → 상수로 추출
- [ ] 복잡도 감소
- [ ] TypeScript 타입 개선
- [ ] JSDoc 주석 추가

### 출력 형식:

**1단계: 개선 포인트 (간단히)**
```markdown
- 개선사항 1
- 개선사항 2
- 개선사항 3
```

**2단계: 개선된 전체 코드**
```typescript
// filepath: src/utils/[실제파일명].ts

// 전체 리팩토링된 코드를 작성하세요
// 절대로 "..."로 생략하지 마세요!

export interface ValidationResult {
  isValid: boolean;
  error?: string;
  warning?: string;
}

// 상수 정의
const ERROR_MESSAGES = {
  // ...
} as const;

export function mainFunction(...): ReturnType {
  // 전체 구현
}

// 헬퍼 함수들
function helperFunction1(...) {
  // 전체 구현
}
```

## ⚠️ 중요 규칙:

1. ✅ **filepath 주석 필수** (첫 줄)
2. ✅ **전체 코드 작성** (생략 금지)
3. ✅ **복사 후 바로 실행 가능**해야 함
4. ✅ **모든 테스트 통과** 보장
5. ❌ **"...existing code..." 절대 금지**

**지금 바로 리팩토링된 전체 코드를 작성하세요!**
