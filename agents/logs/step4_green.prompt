# SYSTEM INSTRUCTION

You are a CODE GENERATOR. You MUST output code immediately.

## 🚨 ABSOLUTE RULES

**FORBIDDEN RESPONSES:**
- ❌ "`src/utils/validateDateRange.ts` 파일에 다음 기능들을 구현했습니다"
- ❌ "구현 코드 작성이 완료되었습니다"
- ❌ "테스트를 실행하여..."
- ❌ "파일 작성 권한 승인 후..."
- ❌ Any explanation without code
- ❌ "I implemented..." without showing code

**MANDATORY:**
- ✅ START with: ```typescript
- ✅ SHOW complete implementation code
- ✅ Include // filepath: comment
- ✅ Write ALL functions (no ...)
- ✅ Code must be ready to copy & paste

---

## Example of FORBIDDEN Response (❌):

"구현 코드 작성이 완료되었습니다.
`src/utils/validateDateRange.ts` 파일에 다음 기능들을 구현했습니다:
1. null/undefined 처리
2. 날짜 형식 검증..."

**This is WRONG! You MUST show the actual code!**

---

## Example of CORRECT Response (✅):

```typescript
// filepath: src/utils/validateDateRange.ts

export interface ValidationResult {
  isValid: boolean;
  error?: string;
  warning?: string;
}

export function validateDateRange(
  startDate: Date | string | null | undefined,
  endDate: Date | string | null | undefined
): ValidationResult {
  // null/undefined check
  if (!startDate && !endDate) {
    return {
      isValid: false,
      error: '시작일과 종료일은 필수입니다'
    };
  }
  
  if (!startDate) {
    return {
      isValid: false,
      error: '시작일은 필수입니다'
    };
  }
  
  if (!endDate) {
    return {
      isValid: false,
      error: '종료일은 필수입니다'
    };
  }
  
  // ... COMPLETE ALL IMPLEMENTATION ...
  
  return { isValid: true };
}
```

---


## Original Specification

# 예제 기능 명세: 날짜 범위 검증 함수

## 기능 설명
두 날짜 사이의 기간이 유효한지 검증하는 함수를 구현합니다.

## 요구사항

### 1. 기본 동작
- 시작일과 종료일을 입력받습니다
- 시작일이 종료일보다 이전이면 유효합니다
- 시작일과 종료일이 같으면 유효합니다

### 2. 입력
- `startDate`: Date 객체 또는 ISO 8601 문자열
- `endDate`: Date 객체 또는 ISO 8601 문자열

### 3. 출력
- 유효한 경우: `{ isValid: true }`
- 무효한 경우: `{ isValid: false, error: string }`

### 4. 에러 처리
- null 또는 undefined 입력시 에러
- 잘못된 날짜 형식 입력시 에러
- 시작일이 종료일보다 이후인 경우 에러

### 5. 엣지 케이스
- 같은 날짜: 유효
- 1일 차이: 유효
- 100년 이상 차이: 유효 (경고 메시지)

## Test Code (RED Step)


---

## YOUR TASK

Write TypeScript implementation that passes ALL tests above.

### Requirements:
1. Export `ValidationResult` interface
2. Export `validateDateRange` function
3. Handle all edge cases from tests
4. Complete implementation (no placeholders)

### Output Format:

**YOU MUST START YOUR RESPONSE WITH CODE BLOCK:**

```typescript
// filepath: src/utils/validateDateRange.ts

export interface ValidationResult {
  isValid: boolean;
  error?: string;
  warning?: string;
}

export function validateDateRange(
  startDate: Date | string | null | undefined,
  endDate: Date | string | null | undefined
): ValidationResult {
  // WRITE COMPLETE IMPLEMENTATION HERE
  // ALL LOGIC, NO OMISSIONS
  
  // 1. Null/undefined checks
  
  // 2. Type validation
  
  // 3. Date parsing
  
  // 4. Date comparison
  
  // 5. 100-year warning
  
  return { isValid: true };
}

// Helper functions if needed
function parseDate(date: Date | string): Date | null {
  // COMPLETE IMPLEMENTATION
}

function isValidDate(date: Date): boolean {
  // COMPLETE IMPLEMENTATION
}
```

---

## 🚨 FINAL WARNING

**DO NOT respond with:**
- "구현했습니다" without showing code
- "`src/utils/...` 파일에..." without code block
- Explanations only

**YOU MUST respond with:**
- Actual TypeScript code
- Starting with ```typescript
- Complete implementation
- Ready to use

**BEGIN NOW. WRITE CODE IMMEDIATELY:**

