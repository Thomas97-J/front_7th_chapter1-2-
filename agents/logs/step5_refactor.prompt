당신은 TDD REFACTOR 단계 전문가입니다.

## 원본 명세

# 예제 기능 명세: 날짜 범위 검증 함수

## 기능 설명
두 날짜 사이의 기간이 유효한지 검증하는 함수를 구현합니다.

## 요구사항

### 1. 기본 동작
- 시작일과 종료일을 입력받습니다
- 시작일이 종료일보다 이전이면 유효합니다
- 시작일과 종료일이 같으면 유효합니다

### 2. 입력
- `startDate`: Date 객체 또는 ISO 8601 문자열
- `endDate`: Date 객체 또는 ISO 8601 문자열

### 3. 출력
- 유효한 경우: `{ isValid: true }`
- 무효한 경우: `{ isValid: false, error: string }`

### 4. 에러 처리
- null 또는 undefined 입력시 에러
- 잘못된 날짜 형식 입력시 에러
- 시작일이 종료일보다 이후인 경우 에러

### 5. 엣지 케이스
- 같은 날짜: 유효
- 1일 차이: 유효
- 100년 이상 차이: 유효 (경고 메시지)

## GREEN 단계 구현 코드 (Step 4)

테스트를 통과시키는 최소한의 구현을 작성하겠습니다.

```typescript
// filepath: src/utils/dateRangeValidation.ts

export interface ValidationResult {
  isValid: boolean;
  error?: string;
  warning?: string;
}

export function validateDateRange(
  startDate: Date | string | null | undefined,
  endDate: Date | string | null | undefined
): ValidationResult {
  // null/undefined 체크
  if (startDate === null || startDate === undefined) {
    return { isValid: false, error: '시작일은 필수입니다' };
  }
  
  if (endDate === null || endDate === undefined) {
    return { isValid: false, error: '종료일은 필수입니다' };
  }

  // 빈 문자열 또는 공백 체크
  if (typeof startDate === 'string' && startDate.trim() === '') {
    return { isValid: false, error: '유효하지 않은 시작일 형식입니다' };
  }
  
  if (typeof endDate === 'string' && endDate.trim() === '') {
    return { isValid: false, error: '유효하지 않은 종료일 형식입니다' };
  }

  // Date 객체로 변환
  let startDateObj: Date;
  let endDateObj: Date;

  if (startDate instanceof Date) {
    startDateObj = startDate;
  } else {
    startDateObj = new Date(startDate);
  }

  if (endDate instanceof Date) {
    endDateObj = endDate;
  } else {
    endDateObj = new Date(endDate);
  }

  // 유효한 날짜인지 확인
  if (isNaN(startDateObj.getTime())) {
    return { isValid: false, error: '유효하지 않은 시작일 형식입니다' };
  }

  if (isNaN(endDateObj.getTime())) {
    return { isValid: false, error: '유효하지 않은 종료일 형식입니다' };
  }

  // 날짜 비교
  if (startDateObj > endDateObj) {
    return { isValid: false, error: '시작일은 종료일보다 이전이어야 합니다' };
  }

  // 100년 이상 차이 체크
  const yearsDiff = (endDateObj.getTime() - startDateObj.getTime()) / (1000 * 60 * 60 * 24 * 365.25);
  if (yearsDiff > 100) {
    return { isValid: true, warning: '날짜 범위가 100년을 초과합니다' };
  }

  return { isValid: true };
}
```

이 구현은:

1. **null/undefined 처리**: 필수 입력값 검증
2. **빈 문자열/공백 처리**: 유효하지 않은 입력 검증
3. **Date 변환**: 문자열과 Date 객체 모두 처리
4. **날짜 유효성 검증**: `isNaN(date.getTime())` 사용
5. **날짜 비교**: 시작일 > 종료일 체크
6. **100년 경고**: 날짜 차이 계산 및 경고 메시지

모든 테스트를 통과시키는 최소한의 코드입니다.

---

위의 코드를 개선해주세요.

리팩토링 체크리스트:
- [ ] 중복 제거 (DRY 원칙)
- [ ] 명명 개선 (의도를 명확히)
- [ ] 함수 분리 (단일 책임)
- [ ] 매직 넘버/스트링 제거
- [ ] 복잡도 감소
- [ ] TypeScript 타입 개선
- [ ] 주석 추가 (필요시)

출력 형식:
````typescript
// filepath: src/utils/[기능명].ts

// 개선된 코드
````

**중요: 리팩토링 후에도 모든 테스트가 통과해야 합니다!**

개선 포인트를 설명하고 개선된 전체 코드를 제공하세요.
