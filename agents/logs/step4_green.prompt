# SYSTEM INSTRUCTION

You are a CODE GENERATOR. You MUST output code immediately.

## 🚨 ABSOLUTE RULES

**FORBIDDEN RESPONSES:**
- ❌ "`src/utils/validateDateRange.ts` 파일에 다음 기능들을 구현했습니다"
- ❌ "구현 코드 작성이 완료되었습니다"
- ❌ "테스트를 실행하여..."
- ❌ "파일 작성 권한 승인 후..."
- ❌ Any explanation without code
- ❌ "I implemented..." without showing code

**MANDATORY:**
- ✅ START with: ```typescript
- ✅ SHOW complete implementation code
- ✅ Include // filepath: comment
- ✅ Write ALL functions (no ...)
- ✅ Code must be ready to copy & paste

---

## Example of FORBIDDEN Response (❌):

"구현 코드 작성이 완료되었습니다.
`src/utils/yourFunction.ts` 파일에 다음 기능들을 구현했습니다:
1. 입력 검증
2. 데이터 처리..."

**This is WRONG! You MUST show the actual code!**

---

## Example of CORRECT Response (✅):

```typescript
// filepath: src/utils/[your-actual-function-name].ts

// Import statements if needed
import { SomeType } from './types';

/**
 * Interface definitions
 */
export interface YourResultType {
  success: boolean;
  data?: YourDataType;
  error?: string;
}

/**
 * Main function implementation
 * 
 * @param param1 - Description
 * @param param2 - Description
 * @returns Result object
 */
export function yourMainFunction(
  param1: Type1 | null | undefined,
  param2: Type2 | null | undefined
): YourResultType {
  // Input validation
  if (!param1) {
    return {
      success: false,
      error: '파라미터1은 필수입니다'
    };
  }
  
  if (!param2) {
    return {
      success: false,
      error: '파라미터2는 필수입니다'
    };
  }
  
  // Main logic
  const result = processInput(param1, param2);
  
  if (!isValid(result)) {
    return {
      success: false,
      error: '처리 결과가 유효하지 않습니다'
    };
  }
  
  return {
    success: true,
    data: result
  };
}

/**
 * Helper functions
 */
function processInput(p1: Type1, p2: Type2): ProcessedType {
  // Complete implementation
  return processed;
}

function isValid(data: ProcessedType): boolean {
  // Complete implementation
  return true;
}
```

**REMEMBER:**
- Replace `[your-actual-function-name]` with the actual function name from the spec
- Replace `YourResultType`, `YourDataType` with actual types
- Replace `yourMainFunction` with actual function name from tests
- Write COMPLETE implementation (no `...` or comments like "// implement logic here")

---


## Original Specification

# 📅 Schedule Recurring Rule Spec

_반복 일정 생성 로직 테스트 명세_

---

## 🧾 목적

반복 일정 생성 로직이 올바르게 동작하는지 검증한다.  
각 반복 유형(매일, 매주, 매월, 매년)에 대해 정확한 날짜 계산과 예외 처리를 수행해야 한다.

---

## ⚙️ 사전 조건

- 기준 일정: **2024-01-31 (수요일)**
- 반복 옵션: `매일`, `매주`, `매월`, `매년`
- 날짜 형식: `YYYY-MM-DD` (ISO 8601)
- **일정 겹침은 고려하지 않음**

---

## 🧩 테스트 시나리오

### 1️⃣ 매일 반복

**Given:** 시작일이 `2024-01-31`  
**When:** 반복 유형이 `매일`일 때  
**Then:**

- 다음 일정은 `2024-02-01`에 생성되어야 한다.
- 이후 일정은 하루씩 증가한다.

| 반복 횟수 | 예상 날짜  |
| :-------: | :--------: |
|   1회차   | 2024-02-01 |
|   2회차   | 2024-02-02 |
|   3회차   | 2024-02-03 |

---

### 2️⃣ 매주 반복

**Given:** 시작일이 `2024-01-31 (수요일)`  
**When:** 반복 유형이 `매주`일 때  
**Then:**

- 매주 같은 요일(수요일)에 생성된다.
- 다음 일정은 `2024-02-07`이다.

| 반복 횟수 | 예상 날짜  |
| :-------: | :--------: |
|   1회차   | 2024-02-07 |
|   2회차   | 2024-02-14 |
|   3회차   | 2024-02-21 |

---

### 3️⃣ 매월 반복

**Given:** 시작일이 `2024-01-31`  
**When:** 반복 유형이 `매월`일 때  
**Then:**

- “매월 마지막일”이 아닌, “**31일에만**” 생성되어야 한다.
- 2월에는 31일이 없으므로 일정이 생성되지 않는다.
- 다음 생성일은 `2024-03-31`이다.

| 반복 횟수 | 예상 날짜  |
| :-------: | :--------: |
|   1회차   | 2024-03-31 |
|   2회차   | 2024-05-31 |

---

### 4️⃣ 매년 반복

**Given:** 시작일이 `2024-02-29 (윤년)`  
**When:** 반복 유형이 `매년`일 때  
**Then:**

- **2월 29일에만 생성되어야 한다.**
- 다음 일정은 다음 윤년인 `2028-02-29`이다.

| 반복 횟수 | 예상 날짜  |
| :-------: | :--------: |
|   1회차   | 2028-02-29 |
|   2회차   | 2032-02-29 |

---

### 5️⃣ 반복 일정 겹침 무시

**Given:** 이미 다른 일정이 존재하는 날짜에도  
**When:** 반복 생성 로직이 실행될 때  
**Then:**

- 일정 겹침 여부를 확인하지 않는다.
- 동일한 날짜에 중복 생성이 허용된다.

---

## ✅ 기대 결과

- 모든 반복 유형에 대해 예외 날짜 및 규칙이 정확히 적용된다.
- 일정 겹침과 무관하게 반복 일정이 생성된다.
- 매월/매년 예외 조건(31일, 윤년 29일) 처리 로직이 정확히 동작한다.

---

## 📁 파일명

## Test Code (RED Step)


---

## YOUR TASK

Write TypeScript implementation that passes ALL tests above.

### Requirements Analysis (from tests):

Look at the test file above and identify:
1. **Function name** - What is the main function being tested?
2. **Interface/Type name** - What types are expected?
3. **Parameters** - What inputs does the function take?
4. **Return type** - What should the function return?
5. **Edge cases** - What special cases are tested?

### Implementation Checklist:
- [ ] Export all required interfaces/types (found in tests)
- [ ] Export main function with correct signature
- [ ] Handle all edge cases from tests
- [ ] Complete implementation (NO placeholders like `...` or `// TODO`)
- [ ] Include helper functions if needed
- [ ] Add JSDoc comments for public APIs

### Output Format:

**YOU MUST START YOUR RESPONSE WITH CODE BLOCK:**

```typescript
// filepath: src/utils/[EXTRACT-FILENAME-FROM-SPEC-OR-TEST].ts

/**
 * Type definitions (extract from test expectations)
 */
export interface YourResultInterface {
  // Define based on test expectations
}

/**
 * Main function (extract name and signature from tests)
 * 
 * @param param1 - Description from spec
 * @param param2 - Description from spec
 * @returns Description from spec
 */
export function yourFunctionName(
  param1: ParamType1,
  param2: ParamType2
): ReturnType {
  // WRITE COMPLETE IMPLEMENTATION
  // Handle all test cases:
  
  // 1. Null/undefined checks (if tests check these)
  
  // 2. Type validation (if tests check invalid types)
  
  // 3. Business logic (core functionality)
  
  // 4. Edge cases (100-year warning, etc. from tests)
  
  return result;
}

// Helper functions if complexity requires separation
function helperFunction1(...): ReturnType {
  // COMPLETE IMPLEMENTATION
}

function helperFunction2(...): ReturnType {
  // COMPLETE IMPLEMENTATION
}
```

---

## 🚨 CRITICAL REQUIREMENTS

1. **Extract information from tests above** - Don't assume function names
2. **Use EXACT names from tests** - Function names, interface names, property names
3. **Include filepath comment** - Match the file structure from spec
4. **Write COMPLETE code** - No `...` or `// implement here` placeholders
5. **Ready to run** - Code must be copy-paste ready

## 🚫 ABSOLUTELY FORBIDDEN

DO NOT respond with:
- "구현했습니다" without showing code
- "`src/utils/...` 파일에..." without actual code block
- Only explanations or descriptions
- Code with placeholders (`...`, `// TODO`, `// implement logic`)

## ✅ YOU MUST RESPOND WITH

- Actual TypeScript code
- Starting with ```typescript
- Complete implementation
- All functions fully written
- Ready to use immediately

**ANALYZE THE TEST CODE ABOVE, THEN WRITE THE COMPLETE IMPLEMENTATION:**


